wtp_rej_shortdata<-read.csv(file="shortformdata.csv",header=TRUE, sep=',')
#re-code acceptance from 2 to -1 for condition_recode and males from 0 to -1 in sex
wtp_rej_longdata$condition_recode[wtp_rej_longdata$condition_recode==2]<- -1
wtp_rej_longdata$sex[wtp_rej_longdata$sex==0]<- -1
#re-code acceptance from 2 to -1 for condition_recode and males from 0 to -1 in sex
wtp_rej_shortdata$condition_recode[wtp_rej_longdata$condition_recode==2]<- -1
View(wtp_rej_shortdata)
View(wtp_rej_shortdata)
View(wtp_rej_shortdata)
#re-code acceptance from 2 to -1 for condition_recode and males from 0 to -1 in sex
wtp_rej_shortdata$condition_recode[wtp_rej_shortdata$condition_recode==2]<- -1
wtp_rej_shortdata$sex[wtp_rej_shortdata$sex==0]<- -1
# Create prop_nonsocialchoice as the absolute difference from 1
wtp_rej_shortdata <- wtp_rej_shortdata %>%
mutate(prop_nonsocialchoice = abs(prop_socialchoice - 1))
wtp_rej_longdata <- wtp_rej_longdata %>%
mutate(prop_nonsocialchoice = abs(prop_socialchoice - 1))
# Check if the column was created correctly
head(wtp_rej_shortdata)
#create seperate variables with values for within each condition
# Subset data where condition_recode == 1
rej <- wtp_rej_shortdata %>%
filter(condition_recode == 1) %>%
as.data.frame()  # Ensure it's a data frame if needed
# Subset data where condition_recode == 2
acc <- wtp_rej_shortdata %>%
filter(condition_recode == -1) %>%
as.data.frame()
# Subset data where condition_recode == 1
rej_long <- wtp_rej_longdata %>%
filter(condition_recode == 1) %>%
as.data.frame()  # Ensure it's a data frame if needed
# Subset data where condition_recode == 2
acc_long <- wtp_rej_longdata %>%
filter(condition_recode == -1) %>%
as.data.frame()
#hierarchical logistic regression for PSE with interaction of condition
PSE <- glmer(socialchoice ~ value_diff * condition + (1 + value_diff | participant),
data = wtp_rej_longdata, family = binomial)
# Create the Bar Plot with Correct SEM-based Error Bars
ggplot(summary_data, aes(x = Choice_Type, y = mean_prop, fill = Choice_Type)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black", alpha = 0.9) +  # Bars with outline
geom_errorbar(aes(ymin = mean_prop - sem, ymax = mean_prop + sem),
width = 0.1, position = position_dodge(.9), color = "black", size = 0.8) +  # Corrected SEM error bars
scale_fill_manual(name = "Choice Type", values = c("Social" = "#88CCEE", "Non-Social" = "#DDCC77")) +  # Custom colors
labs(
x = "Choice Type",
y = "Proportion of Choices",
title = ""
) +
theme_minimal()+
theme(panel.grid = element_blank(),
axis.title.x = element_text(size = 18, face = "bold"),
axis.title.y = element_text(size = 18, face = "bold"),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size = 16),
legend.title = element_text(size = 16),
legend.text = element_text(size = 14))
#hierarchical logistic regression for PSE with interaction of condition
PSE <- glmer(socialchoice ~ value_diff * condition_recode + (1 + value_diff | participant),
data = wtp_rej_longdata, family = binomial)
summary(PSE)
# Assign the coefficients
b0 <- 0.32937
b1 <- -69.19869
b2 <- -0.02595
b3 <- -1.61406
# Compute condition-specific PSEs
pse_accept <- - (b0 - b2) / (b1 - b3)
pse_reject <- - (b0 + b2) / (b1 + b3)
# Print them
pse_accept
pse_reject
# Define range of value_diff values (use your task range!)
value_diff_seq <- seq(-0.05, 0.05, length.out = 100)
# Create prediction dataframe for both conditions
pred_data <- expand.grid(
value_diff_centered = value_diff_seq,
condition_recode = c(-1, 1)  # -1 = Acceptance, 1 = Rejection
)
# Add labels for clarity
pred_data <- pred_data %>%
mutate(condition_label = ifelse(condition_recode == -1, "Acceptance", "Rejection"))
# Define range of value_diff values (use your task range!)
value_diff_seq <- seq(-0.05, 0.05, length.out = 100)
# Create prediction dataframe for both conditions
pred_data <- expand.grid(
value_diff_centered = value_diff_seq,
condition_recode = c(-1, 1)  # -1 = Acceptance, 1 = Rejection
)
# Add labels for clarity
pred_data <- pred_data %>%
mutate(condition_label = ifelse(condition_recode == -1, "Acceptance", "Rejection"))
# Predict probabilities
pred_data$predicted_prob <- predict(model_centered, newdata = pred_data, type = "response")
# Define range of value_diff values (use your task range!)
value_diff_seq <- seq(-0.05, 0.05, length.out = 100)
# Create prediction dataframe for both conditions
pred_data <- expand.grid(
value_diff_centered = value_diff_seq,
condition_recode = c(-1, 1)  # -1 = Acceptance, 1 = Rejection
)
# Add labels for clarity
pred_data <- pred_data %>%
mutate(condition_label = ifelse(condition_recode == -1, "Acceptance", "Rejection"))
# Predict probabilities
pred_data$predicted_prob <- predict(PSE, newdata = pred_data, type = "response")
# Define range of value_diff values (use your task range!)
value_diff_seq <- seq(-0.05, 0.05, length.out = 100)
# Create prediction dataframe for both conditions
pred_data <- expand.grid(
value_diff = value_diff_seq,
condition_recode = c(-1, 1)  # -1 = Acceptance, 1 = Rejection
)
# Add labels for clarity
pred_data <- pred_data %>%
mutate(condition_label = ifelse(condition_recode == -1, "Acceptance", "Rejection"))
# Predict probabilities
pred_data$predicted_prob <- predict(PSE, newdata = pred_data, type = "response")
# Define range of value_diff values (use your task range!)
value_diff_seq <- seq(-0.05, 0.05, length.out = 100)
# Create prediction dataframe for both conditions
pred_data <- expand.grid(
value_diff = value_diff_seq,
condition_recode = c(-1, 1)  # -1 = Acceptance, 1 = Rejection
)
# Add labels for clarity
pred_data <- pred_data %>%
mutate(condition_label = ifelse(condition_recode == -1, "Acceptance", "Rejection"))
# Predict probabilities
pred_data$predicted_prob <- predict(PSE, newdata = pred_data, type = "response")
labs(
value_diff_seq <- seq(-0.05, 0.05, length.out = 100)
# Coefficients from your model
b0 <- 0.32937
value_diff_seq <- seq(-0.05, 0.05, length.out = 100)
# Coefficients from your model
b0 <- 0.32937
b1 <- -69.19869
b2 <- -0.02595
b3 <- -1.61406
# Build dataframe
pred_data <- expand.grid(
value_diff = value_diff_seq,
condition_recode = c(-1, 1)  # -1 = Acceptance, 1 = Rejection
)
# Calculate linear predictor manually
pred_data <- pred_data %>%
mutate(
condition_label = ifelse(condition_recode == -1, "Acceptance", "Rejection"),
linear_predictor = b0 + b1 * value_diff + b2 * condition_recode + b3 * value_diff * condition_recode,
predicted_prob = 1 / (1 + exp(-linear_predictor))  # logistic function
)
ggplot(pred_data, aes(x = value_diff, y = predicted_prob, color = condition_label)) +
geom_line(size = 1.2) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray40") +
geom_point(data = data.frame(
value_diff = c(pse_accept, pse_reject),
predicted_prob = 0.5,
condition_label = c("Acceptance", "Rejection")
), aes(x = value_diff, y = predicted_prob, color = condition_label), size = 3, shape = 21, fill = "white") +
labs(
title = "Predicted Choice Curves by Condition",
x = "Value Difference (Social - Non-Social)",
y = "Predicted Probability of Choosing Social Option",
color = "Condition"
) +
theme_minimal(base_size = 14)
aq <- read.csv(file=rsq.csv, header =TRUE, sep = ',')
setwd("/Users/jordansiegel/Documents/Github/WTP_Rejection_Choice/scoring")
aq <- read.csv(file=rsq.csv, header =TRUE, sep = ',')
setwd("/Users/jordansiegel/Documents/Github/WTP_Rejection_Choice/scoring")
aq <- read.csv(file="rsq.csv", header =TRUE, sep = ',')
setwd("/Users/jordansiegel/Documents/Github/WTP_Rejection_Choice/")
#regression decision price
condition_rsq <-- lmer(
social_decisionprice_mean ~ condition_recode * rsq + (1 + condition_recode | participant),
data = wtp_rej_shortdata
)
rsq <- read.csv(file="rsq.csv", header =TRUE, sep = ',')
setwd("/Users/jordansiegel/Documents/Github/WTP_Rejection_Choice/scoring")
rsq <- read.csv(file="rsq.csv", header =TRUE, sep = ',')
setwd("/Users/jordansiegel/Documents/Github/WTP_Rejection_Choice/")
#regression decision price
condition_rsq <-- lmer(
social_decisionprice_mean ~ condition_recode * rsq + (1 + condition_recode | participant),
data = wtp_rej_shortdata
)
wtp_rej_shortdata <- wtp_rej_shortdata %>%
left_join(participant_data, by = "participant")
wtp_rej_shortdata <- wtp_rej_shortdata %>%
left_join(rsq, by = "participant")
View(rsq)
wtp_rej_shortdata <- wtp_rej_shortdata %>%
left_join(rsq, by = "Prolific_ID")
rsq <- rsq %>%
rename(participant = Prolific_ID)
wtp_rej_shortdata <- wtp_rej_shortdata %>%
left_join(rsq, by = "participant")
#regression decision price
condition_rsq <-- lmer(
social_decisionprice_mean ~ condition_recode * rsq + (1 + condition_recode | participant),
data = wtp_rej_shortdata
)
wtp_rej_shortdata <- wtp_rej_shortdata %>%
mutate(rsq = unlist(rsq))
#regression decision price
condition_rsq <-- lmer(
social_decisionprice_mean ~ condition_recode * rsq + (1 + condition_recode | participant),
data = wtp_rej_shortdata
)
rsq <- rsq %>%
rename(participant = Prolific_ID)
rej <- rej %>%
left_join(rsq, by = "participant")
rej <- wtp_rej_shortdata %>%
mutate(rsq = unlist(rsq))
#regression decision price
condition_rsq <-- lmer(
social_decisionprice_mean ~ condition_recode * rsq + (1 + condition_recode | participant),
data = rej
)
View(rsq)
rej <- rej %>%
mutate(rsq = unlist(rsq))
#regression decision price
condition_rsq <-- lmer(
social_decisionprice_mean ~ condition_recode * rsq + (1 + condition_recode | participant),
data = rej
)
#regression decision price
condition_rsq <- lmer(
social_decisionprice_mean ~ condition_recode * rsq + (1 + condition_recode | participant),
data = rej
)
View(rej)
View(rej)
rej <- wtp_rej_shortdata %>%
filter(condition_recode == 1) %>%
as.data.frame()  # Ensure it's a data frame if needed
#regression decision price
condition_rsq <- lmer(
social_decisionprice_mean ~ condition_recode * rsq + (1 + condition_recode | participant),
data = rej
)
#regression decision price
condition_rsq <- condition_rsq <- lm(
social_decisionprice_mean ~ rsq,
data = rej
)
#regression decision price
condition_rsq <- condition_rsq <- lm(
social_decisionprice_mean ~ rsq * condition_recode,
data = rej
)
summary(condition_rsq)
View(rej)
#regression decision price
condition_rsq <- condition_rsq <- lm(
social_decisionprice_mean ~ RSQ_finalscore * condition_recode,
data = rej
)
summary(condition_rsq)
#regression decision price
condition_rsq <- condition_rsq <- lm(
social_decisionprice_mean ~ RSQ_finalscore
data = rej
#regression decision price
condition_rsq <- condition_rsq <- lm(
social_decisionprice_mean ~ RSQ_finalscore,
data = rej
)
summary(condition_rsq)
wtp_rej_longdata <- wtp_rej_longdata %>%
left_join(rsq, by = "participant")
View(wtp_rej_longdata)
#PSE analysis with RSQ included
PSE_withrsq <- glmer(
socialchoice ~ value_diff * condition_recode * rsq_centered + (1 + value_diff | participant),
data = wtp_rej_longdata,
family = binomial
)
#PSE analysis with RSQ included
PSE_withrsq <- glmer(
socialchoice ~ value_diff * condition_recode * RSQ_finalscore + (1 + value_diff | participant),
data = wtp_rej_longdata,
family = binomial
)
summary(PSE_withrsq)
source("~/Documents/GitHub/WTP_Rejection_Choice/wtp_rej_regressions.R")
ggplot(pred_data, aes(x = value_diff, y = predicted_prob, color = condition_label)) +
geom_line(size = 1.2) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray40") +
geom_point(data = data.frame(
value_diff = c(pse_accept, pse_reject),
predicted_prob = 0.5,
condition_label = c("Acceptance", "Rejection")
), aes(x = value_diff, y = predicted_prob, color = condition_label), size = 3, shape = 21, fill = "white") +
labs(
title = "",
x = "Value Difference",
y = "Predicted Prob of  Social Choice",
color = "Condition"
) +
theme_minimal(base_size = 14)
# Calculate linear predictor manually
pred_data <- pred_data %>%
mutate(
condition_label = ifelse(condition_recode == -1, "Acceptance", "Rejection"),
linear_predictor = b0 + b1 * value_diff + b2 * condition_recode + b3 * value_diff * condition_recode,
predicted_prob = 1 / (1 + exp(-linear_predictor))  # logistic function
)
# Build dataframe
pred_data <- expand.grid(
value_diff = value_diff_seq,
condition_recode = c(-1, 1)  # -1 = Acceptance, 1 = Rejection
)
# Calculate linear predictor manually
pred_data <- pred_data %>%
mutate(
condition_label = ifelse(condition_recode == -1, "Acceptance", "Rejection"),
linear_predictor = b0 + b1 * value_diff + b2 * condition_recode + b3 * value_diff * condition_recode,
predicted_prob = 1 / (1 + exp(-linear_predictor))  # logistic function
)
#plot PSE
value_diff_seq <- seq(-0.05, 0.05, length.out = 100)
# Coefficients from your model
b0 <- 0.32937
b1 <- -69.19869
b2 <- -0.02595
b3 <- -1.61406
# Build dataframe
pred_data <- expand.grid(
value_diff = value_diff_seq,
condition_recode = c(-1, 1)  # -1 = Acceptance, 1 = Rejection
)
# Calculate linear predictor manually
pred_data <- pred_data %>%
mutate(
condition_label = ifelse(condition_recode == -1, "Acceptance", "Rejection"),
linear_predictor = b0 + b1 * value_diff + b2 * condition_recode + b3 * value_diff * condition_recode,
predicted_prob = 1 / (1 + exp(-linear_predictor))  # logistic function
)
#plot PSE
value_diff_seq <- seq(-0.05, 0.05, length.out = 100)
# Coefficients from your model
b0 <- 0.32937
b1 <- -69.19869
b2 <- -0.02595
b3 <- -1.61406
# Build dataframe
pred_data <- expand.grid(
value_diff = value_diff_seq,
condition_recode = c(-1, 1)  # -1 = Acceptance, 1 = Rejection
)
# Calculate linear predictor manually
pred_data <- pred_data %>%
mutate(
condition_label = ifelse(condition_recode == -1, "Acceptance", "Rejection"),
linear_predictor = b0 + b1 * value_diff + b2 * condition_recode + b3 * value_diff * condition_recode,
predicted_prob = 1 / (1 + exp(-linear_predictor))  # logistic function
)
#hierarchical logistic regression for PSE with interaction of condition
PSE <- glmer(socialchoice ~ value_diff * condition_recode + (1 + value_diff | participant),
data = wtp_rej_longdata, family = binomial)
summary(PSE)
# Assign the coefficients
b0 <- 0.32937
b1 <- -69.19869
b2 <- -0.02595
b3 <- -1.61406
# Compute condition-specific PSEs
pse_accept <- - (b0 - b2) / (b1 - b3)
pse_reject <- - (b0 + b2) / (b1 + b3)
# Print them
pse_accept
pse_reject
#plot PSE
value_diff_seq <- seq(-0.05, 0.05, length.out = 100)
# Coefficients from your model
b0 <- 0.32937
b1 <- -69.19869
b2 <- -0.02595
b3 <- -1.61406
# Build dataframe
pred_data <- expand.grid(
value_diff = value_diff_seq,
condition_recode = c(-1, 1)  # -1 = Acceptance, 1 = Rejection
)
# Calculate linear predictor manually
pred_data <- pred_data %>%
mutate(
condition_label = ifelse(condition_recode == -1, "Acceptance", "Rejection"),
linear_predictor = b0 + b1 * value_diff + b2 * condition_recode + b3 * value_diff * condition_recode,
predicted_prob = 1 / (1 + exp(-linear_predictor))  # logistic function
)
library(lme4)
library(lmerTest)
library(Rcpp)
library(Matrix)
library(ggplot2)
library(ggplot2)
library(dplyr)
library(tidyr)
library(effsize)
# Calculate linear predictor manually
pred_data <- pred_data %>%
mutate(
condition_label = ifelse(condition_recode == -1, "Acceptance", "Rejection"),
linear_predictor = b0 + b1 * value_diff + b2 * condition_recode + b3 * value_diff * condition_recode,
predicted_prob = 1 / (1 + exp(-linear_predictor))  # logistic function
)
ggplot(pred_data, aes(x = value_diff, y = predicted_prob, color = condition_label)) +
geom_line(size = 1.2) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray40") +
geom_point(data = data.frame(
value_diff = c(pse_accept, pse_reject),
predicted_prob = 0.5,
condition_label = c("Acceptance", "Rejection")
), aes(x = value_diff, y = predicted_prob, color = condition_label), size = 3, shape = 21, fill = "white") +
labs(
title = "",
x = "Value Difference",
y = "Predicted Prob of  Social Choice",
color = "Condition"
) +
theme_minimal(base_size = 14)
ggplot(pred_data, aes(x = value_diff, y = predicted_prob, color = condition_label)) +
geom_line(size = 1.2) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray40") +
geom_point(data = data.frame(
value_diff = c(pse_accept, pse_reject),
predicted_prob = 0.5,
condition_label = c("Acceptance", "Rejection")
), aes(x = value_diff, y = predicted_prob, color = condition_label), size = 3, shape = 21, fill = "white") + scale_color_manual(
values = c("Acceptance" = "#DDCC77",  # orange
"Rejection" = "#88CCEE")  # blue
)
labs(
title = "",
x = "Value Difference",
y = "Predicted Prob of  Social Choice",
color = "Condition"
) +
theme_minimal(base_size = 14)
ggplot(pred_data, aes(x = value_diff, y = predicted_prob, color = condition_label)) +
geom_line(size = 1.2) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray40") +
geom_point(data = data.frame(
value_diff = c(pse_accept, pse_reject),
predicted_prob = 0.5,
condition_label = c("Acceptance", "Rejection")
), aes(x = value_diff, y = predicted_prob, color = condition_label), size = 3, shape = 21, fill = "white") + scale_color_manual(
values = c("Acceptance" = "#DDCC77",  # orange
"Rejection" = "#88CCEE")  # blue
)
labs(
title = "",
x = "Value Difference",
y = "Predicted Prob of  Social Choice",
color = "Condition"
) +
theme_classic(base_size = 14)
(
ggplot(pred_data, aes(x = value_diff, y = predicted_prob, color = condition_label)) +
geom_line(size = 1.2) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray40") +
geom_point(data = data.frame(
value_diff = c(pse_accept, pse_reject),
predicted_prob = 0.5,
condition_label = c("Acceptance", "Rejection")
), aes(x = value_diff, y = predicted_prob, color = condition_label),
size = 3, shape = 21, fill = "white") +
scale_color_manual(
values = c("Acceptance" = "#DDCC77",
"Rejection" = "#88CCEE")
) +
labs(
title = "",
x = "Value Difference",
y = "Predicted Probability of Social Choice",
color = "Condition"
) +
theme_classic(base_size = 14)
)
PSE_plot <-  (
ggplot(pred_data, aes(x = value_diff, y = predicted_prob, color = condition_label)) +
geom_line(size = 1.2) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray40") +
geom_point(data = data.frame(
value_diff = c(pse_accept, pse_reject),
predicted_prob = 0.5,
condition_label = c("Acceptance", "Rejection")
), aes(x = value_diff, y = predicted_prob, color = condition_label),
size = 3, shape = 21, fill = "white") +
scale_color_manual(
values = c("Acceptance" = "#DDCC77",
"Rejection" = "#88CCEE")
) +
labs(
title = "",
x = "Value Difference",
y = "Predicted Probability of Social Choice",
color = "Condition"
) +
theme_classic(base_size = 14)
)
# Save the plot
ggsave("PSE_plot.png", my_plot, width = 6, height = 4, dpi = 300)
# Save the plot
ggsave("PSE_plot.png", PSE_plot, width = 6, height = 4, dpi = 300)
source("~/Documents/GitHub/WTP_Rejection_Choice/wtp_rej_regressions.R")
