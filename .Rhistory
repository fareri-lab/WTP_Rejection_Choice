wtp_rej_longdata$sex[wtp_rej_longdata$sex==0]<- -1
#re-code acceptance from 2 to -1 for condition_recode and males from 0 to -1 in sex
wtp_rej_shortdata$condition_recode[wtp_rej_longdata$condition_recode==2]<- -1
# Create prop_nonsocialchoice as the absolute difference from 1
wtp_rej_shortdata <- wtp_rej_shortdata %>%
mutate(prop_nonsocialchoice = abs(prop_socialchoice - 1))
wtp_rej_longdata <- wtp_rej_longdata %>%
mutate(prop_nonsocialchoice = abs(prop_socialchoice - 1))
# Check if the column was created correctly
head(wtp_rej_shortdata)
#create seperate variables with values for within each condition
# Subset data where condition_recode == 1
rej <- wtp_rej_shortdata %>%
filter(condition_recode == 1) %>%
as.data.frame()  # Ensure it's a data frame if needed
# Subset data where condition_recode == 2
acc <- wtp_rej_shortdata %>%
filter(condition_recode == -1) %>%
as.data.frame()
# Subset data where condition_recode == 1
rej_long <- wtp_rej_longdata %>%
filter(condition_recode == 1) %>%
as.data.frame()  # Ensure it's a data frame if needed
# Subset data where condition_recode == 2
acc_long <- wtp_rej_longdata %>%
filter(condition_recode == -1) %>%
as.data.frame()
View(wtp_rej_shortdata)
View(wtp_rej_longdata)
setwd("/Users/jordansiegel/Documents/Github/WTP_Rejection_Choice/")
library(lme4)
library(lmerTest)
library(Rcpp)
library(Matrix)
library(ggplot2)
library(dplyr)
wtp_rej_longdata<-read.csv(file="longformdata.csv",header=TRUE, sep=',')
wtp_rej_shortdata<-read.csv(file="shortformdata.csv",header=TRUE, sep=',')
#re-code acceptance from 2 to -1 for condition_recode and males from 0 to -1 in sex
wtp_rej_longdata$condition_recode[wtp_rej_longdata$condition_recode==2]<- -1
wtp_rej_longdata$sex[wtp_rej_longdata$sex==0]<- -1
#re-code acceptance from 2 to -1 for condition_recode and males from 0 to -1 in sex
wtp_rej_shortdata$condition_recode[wtp_rej_longdata$condition_recode==2]<- -1
PSE <- glmer(social_choice ~ value_diff * condition + (1 + value_diff | participant),
data = wtp_rej_longdata, family = binomial)
View(wtp_rej_longdata)
PSE <- glmer(socialchoice ~ value_diff * condition + (1 + value_diff | participant),
data = wtp_rej_longdata, family = binomial)
PSE <- glmer(socialchoice ~ value_diff * condition_recode + (1 + value_diff | participant),
data = wtp_rej_longdata, family = binomial)
summary(PSE)
# Assign the coefficients
b0 <- 0.32937
b1 <- -69.19869
b2 <- -0.02595
b3 <- -1.61406
# Compute condition-specific PSEs
pse_accept <- - (b0 - b2) / (b1 - b3)
pse_reject <- - (b0 + b2) / (b1 + b3)
# Print them
pse_accept
pse_reject
# Step 1: Fit logistic regression per participant per condition
pse_df <- wtp_rej_longdata %>%
group_by(participant, condition_recode) %>%
do({
mod <- try(glm(socialchoice ~ value_diff, data = ., family = binomial), silent = TRUE)
if (inherits(mod, "try-error")) {
data.frame(pse = NA)
} else {
coefs <- coef(mod)
intercept <- coefs[1]
slope <- coefs[2]
pse <- -intercept / slope
data.frame(pse = pse)
}
}) %>%
ungroup()
# Convert condition codes to descriptive names
pse_wide <- pse_df %>%
mutate(condition_recode = ifelse(condition_recosw == -1, "acceptance", "rejection")) %>%
pivot_wider(names_from = condition_recode, values_from = pse, names_prefix = "pse_") %>%
mutate(pse_diff = pse_rejection - pse_acceptance)
library(dplyr)
library(tidyr)
# Step 1: Fit logistic regression per participant per condition
pse_df <- wtp_rej_longdata %>%
group_by(participant, condition_recode) %>%
do({
mod <- try(glm(socialchoice ~ value_diff, data = ., family = binomial), silent = TRUE)
if (inherits(mod, "try-error")) {
data.frame(pse = NA)
} else {
coefs <- coef(mod)
intercept <- coefs[1]
slope <- coefs[2]
pse <- -intercept / slope
data.frame(pse = pse)
}
}) %>%
ungroup()
# Convert condition codes to descriptive names
pse_wide <- pse_df %>%
mutate(condition_recode = ifelse(condition_recode == -1, "acceptance", "rejection")) %>%
pivot_wider(names_from = condition_recode, values_from = pse, names_prefix = "pse_") %>%
mutate(pse_diff = pse_rejection - pse_acceptance)
# Paired Cohen's d on the difference in PSEs
cohen_result <- cohen.d(pse_wide$pse_diff, paired = TRUE)
library(effsize)
install.packages("effsize", dependencies=TRUE)
library(effsize)
# Step 1: Fit logistic regression per participant per condition
pse_df <- wtp_rej_longdata %>%
group_by(participant, condition_recode) %>%
do({
mod <- try(glm(socialchoice ~ value_diff, data = ., family = binomial), silent = TRUE)
if (inherits(mod, "try-error")) {
data.frame(pse = NA)
} else {
coefs <- coef(mod)
intercept <- coefs[1]
slope <- coefs[2]
pse <- -intercept / slope
data.frame(pse = pse)
}
}) %>%
ungroup()
# Convert condition codes to descriptive names
pse_wide <- pse_df %>%
mutate(condition_recode = ifelse(condition_recode == -1, "acceptance", "rejection")) %>%
pivot_wider(names_from = condition_recode, values_from = pse, names_prefix = "pse_") %>%
mutate(pse_diff = pse_rejection - pse_acceptance)
# Paired Cohen's d on the difference in PSEs
cohen_result <- cohen.d(pse_wide$pse_diff, paired = TRUE)
# Step 1: Fit logistic regression per participant per condition
pse_df <- wtp_rej_longdata %>%
group_by(participant, condition_recode) %>%
do({
mod <- try(glm(socialchoice ~ value_diff, data = ., family = binomial), silent = TRUE)
if (inherits(mod, "try-error")) {
data.frame(pse = NA)
} else {
coefs <- coef(mod)
intercept <- coefs[1]
slope <- coefs[2]
pse <- -intercept / slope
data.frame(pse = pse)
}
}) %>%
ungroup()
# Convert condition codes to descriptive names
pse_wide <- pse_df %>%
mutate(condition_recode = ifelse(condition_recode == -1, "acceptance", "rejection")) %>%
pivot_wider(names_from = condition_recode, values_from = pse, names_prefix = "pse_") %>%
mutate(pse_diff = pse_rejection - pse_acceptance)
# Paired Cohen's d on the difference in PSEs
cohen_result <- cohen.d(pse_wide$pse_rejection, pse_wide$pse_acceptance, paired = TRUE)
print(cohen_result)
#re-run with centering
wtp_rej_longdata <- wtp_rej_longdata %>%
mutate(value_diff_centered = value_diff - mean(value_diff, na.rm = TRUE))
model_centered <- glmer(
socialchoice ~ value_diff_centered * condition_recode + (1 + value_diff_centered | participant),
data = wtp_rej_longdata,
family = binomial
)
summary(model_centered)
summary(model_centered)
b0 <- 0.33595
b1 <- -69.22584
b2 <- -0.02581
b3 <- -1.61493
pse_accept <- -(b0 - b2) / (b1 - b3)
pse_reject <- -(b0 + b2) / (b1 + b3)
pse_accept
pse_reject
head(pse_wide)
#plotting individual PSEs
ggplot(pse_wide, aes(x = pse_acceptance, y = pse_rejection)) +
geom_point() + geom_abline(slope = 1, intercept = 0, linetype = "dashed")
#histogram of differences
ggplot(pse_wide, aes(x = pse_diff)) + geom_histogram()
#This version shows each participant's values, with a line connecting them:
# Gather into long format to plot with lines
pse_long <- pse_wide %>%
select(participant, pse_acceptance, pse_rejection) %>%
pivot_longer(cols = starts_with("pse_"), names_to = "condition", values_to = "pse") %>%
mutate(condition = ifelse(condition == "pse_acceptance", "Acceptance", "Rejection"))
# Line plot per participant
ggplot(pse_long, aes(x = condition, y = pse, group = participant)) +
geom_line(alpha = 0.3) +
geom_point(alpha = 0.6) +
labs(
title = "PSEs by Participant Across Conditions",
x = "Condition",
y = "Point of Subjective Equivalence (PSE)"
) +
theme_minimal(base_size = 13)
nrow(pse_long)
length(unique(pse_long$participant))
# Line plot per participant
ggplot(pse_long, aes(x = condition, y = pse, group = factor(participant))) +
geom_line(alpha = 0.3) +
geom_point(alpha = 0.6) +
labs(
title = "PSEs by Participant Across Conditions",
x = "Condition",
y = "Point of Subjective Equivalence (PSE)"
) +
theme_minimal(base_size = 13)
str(pse_long$participant)
# Gather into long format to plot with lines
pse_long <- pse_wide %>%
select(participant, pse_acceptance, pse_rejection) %>%
pivot_longer(cols = starts_with("pse_"), names_to = "condition", values_to = "pse") %>%
mutate(condition = ifelse(condition == "pse_acceptance", "Acceptance", "Rejection"))
pse_long <- pse_long %>%
mutate(participant = as.factor(participant))
# Line plot per participant
ggplot(pse_long, aes(x = condition, y = pse, group = participant)) +
geom_line(alpha = 0.3, color = "#0072B2") +
geom_point(alpha = 0.6, color = "#0072B2") +
labs(
title = "Participant-Level PSEs Across Conditions",
x = "Condition",
y = "Point of Subjective Equivalence (PSE)"
) +
theme_minimal(base_size = 14)
source("~/Documents/GitHub/WTP_Rejection_Choice/wtp_rej_regressions.R")
# Step 1: Fit logistic regression per participant per condition
pse_df <- wtp_rej_longdata %>%
group_by(participant, condition_recode) %>%
do({
mod <- try(glm(socialchoice ~ value_diff, data = ., family = binomial), silent = TRUE)
if (inherits(mod, "try-error")) {
data.frame(pse = NA)
} else {
coefs <- coef(mod)
intercept <- coefs[1]
slope <- coefs[2]
pse <- -intercept / slope
data.frame(pse = pse)
}
}) %>%
ungroup()
library(lme4)
library(lmerTest)
library(Rcpp)
library(Matrix)
library(ggplot2)
library(ggplot2)
library(dplyr)
library(tidyr)
library(effsize)
#re-running the per participant model and filtering out outliers
# Step 1: Fit logistic regression per participant per condition
pse_df <- wtp_rej_longdata %>%
group_by(participant, condition_recode) %>%
do({
mod <- try(glm(socialchoice ~ value_diff, data = ., family = binomial), silent = TRUE)
if (inherits(mod, "try-error")) {
data.frame(pse = NA)
} else {
coefs <- coef(mod)
intercept <- coefs[1]
slope <- coefs[2]
pse <- -intercept / slope
data.frame(pse = pse)
}
}) %>%
ungroup()
# Step 2: Filter out bad PSEs (NA, infinite, or extreme values)
pse_df_clean <- pse_df %>%
filter(!is.na(pse), is.finite(pse), abs(pse) < 1)
# Step 3: Convert condition codes to labels and pivot to wide format
pse_wide <- pse_df_clean %>%
mutate(condition_label = ifelse(condition_recode == -1, "acceptance", "rejection")) %>%
pivot_wider(names_from = condition_label, values_from = pse, names_prefix = "pse_") %>%
mutate(pse_diff = pse_rejection - pse_acceptance)
# Step 4: Compute paired Cohen’s d
cohen_result <- cohen.d(pse_wide$pse_rejection, pse_wide$pse_acceptance, paired = TRUE)
# Step 1: Fit logistic regression per participant per condition
pse_df <- wtp_rej_longdata %>%
group_by(participant, condition_recode) %>%
do({
mod <- try(glm(socialchoice ~ value_diff, data = ., family = binomial), silent = TRUE)
if (inherits(mod, "try-error")) {
data.frame(pse = NA)
} else {
coefs <- coef(mod)
intercept <- coefs[1]
slope <- coefs[2]
pse <- -intercept / slope
data.frame(pse = pse)
}
}) %>%
ungroup()
# Step 2: Filter out bad PSEs (NA, infinite, or extreme values)
pse_df_clean <- pse_df %>%
filter(!is.na(pse), is.finite(pse), abs(pse) < 1)
# Step 3: Convert condition codes to labels and pivot to wide format
pse_wide <- pse_df_clean %>%
mutate(condition_label = ifelse(condition_recode == -1, "acceptance", "rejection")) %>%
pivot_wider(names_from = condition_label, values_from = pse, names_prefix = "pse_") %>%
mutate(pse_diff = pse_rejection - pse_acceptance)
pse_wide <- pse_wide %>%
filter(!is.na(pse_acceptance), !is.na(pse_rejection))
# Step 4: Compute paired Cohen’s d
cohen_result <- cohen.d(pse_wide$pse_rejection, pse_wide$pse_acceptance, paired = TRUE)
str(pse_wide$pse_rejection)
str(pse_wide$pse_acceptance)
# Step 1: Fit logistic regression per participant per condition
pse_df <- wtp_rej_longdata %>%
group_by(participant, condition_recode) %>%
do({
mod <- try(glm(socialchoice ~ value_diff, data = ., family = binomial), silent = TRUE)
if (inherits(mod, "try-error")) {
data.frame(pse = NA)
} else {
coefs <- coef(mod)
intercept <- coefs[1]
slope <- coefs[2]
pse <- -intercept / slope
data.frame(pse = pse)
}
}) %>%
ungroup()
# Step 2: Filter out bad PSEs (NA, infinite, or extreme values)
pse_df_clean <- pse_df %>%
filter(!is.na(pse), is.finite(pse), abs(pse) < 1)
# Step 3: Convert condition codes to labels and pivot to wide format
pse_wide <- pse_df_clean %>%
mutate(condition_label = ifelse(condition_recode == -1, "acceptance", "rejection")) %>%
pivot_wider(names_from = condition_label, values_from = pse, names_prefix = "pse_") %>%
mutate(pse_diff = pse_rejection - pse_acceptance)
pse_wide <- pse_wide %>%
filter(!is.na(pse_acceptance), !is.na(pse_rejection))
# Step 4: Compute paired Cohen’s d
cohen_result <- cohen.d(
pse_wide$pse_rejection,
pse_wide$pse_acceptance,
paired = TRUE
)
# Print vector summaries
length(pse_wide$pse_acceptance)
length(pse_wide$pse_rejection)
any(is.na(pse_wide$pse_acceptance))
any(is.na(pse_wide$pse_rejection))
summary(pse_wide$pse_acceptance)
summary(pse_wide$pse_rejection)
# Step 1: Fit logistic regression per participant per condition
pse_df <- wtp_rej_longdata %>%
group_by(participant, condition_recode) %>%
do({
mod <- try(glm(socialchoice ~ value_diff, data = ., family = binomial), silent = TRUE)
if (inherits(mod, "try-error")) {
data.frame(pse = NA)
} else {
coefs <- coef(mod)
intercept <- coefs[1]
slope <- coefs[2]
pse <- -intercept / slope
data.frame(pse = pse)
}
}) %>%
ungroup()
# Step 2: Filter out bad PSEs (NA, infinite, or extreme values)
pse_df_clean <- pse_df %>%
filter(!is.na(pse), is.finite(pse), abs(pse) < 0.05)
# Step 3: Convert condition codes to labels and pivot to wide format
pse_wide <- pse_df_clean %>%
mutate(condition_label = ifelse(condition_recode == -1, "acceptance", "rejection")) %>%
pivot_wider(names_from = condition_label, values_from = pse, names_prefix = "pse_") %>%
mutate(pse_diff = pse_rejection - pse_acceptance)
pse_wide <- pse_wide %>%
filter(!is.na(pse_acceptance), !is.na(pse_rejection))
# Step 4: Compute paired Cohen’s d
cohen_result <- cohen.d(
pse_wide$pse_rejection,
pse_wide$pse_acceptance,
paired = TRUE
)
# Step 1: Fit logistic regression per participant per condition
pse_df <- wtp_rej_longdata %>%
group_by(participant, condition_recode) %>%
do({
mod <- try(glm(socialchoice ~ value_diff, data = ., family = binomial), silent = TRUE)
if (inherits(mod, "try-error")) {
data.frame(pse = NA)
} else {
coefs <- coef(mod)
intercept <- coefs[1]
slope <- coefs[2]
pse <- -intercept / slope
data.frame(pse = pse)
}
}) %>%
ungroup()
# Step 2: Filter out bad PSEs (NA, infinite, or extreme values)
pse_df_clean <- pse_df %>%
filter(!is.na(pse), is.finite(pse), abs(pse) < 0.1)
# Step 3: Convert condition codes to labels and pivot to wide format
pse_wide <- pse_df_clean %>%
mutate(condition_label = ifelse(condition_recode == -1, "acceptance", "rejection")) %>%
pivot_wider(names_from = condition_label, values_from = pse, names_prefix = "pse_") %>%
mutate(pse_diff = pse_rejection - pse_acceptance)
pse_wide <- pse_wide %>%
filter(!is.na(pse_acceptance), !is.na(pse_rejection))
# Step 4: Compute paired Cohen’s d
cohen_result <- cohen.d(
pse_wide$pse_rejection,
pse_wide$pse_acceptance,
paired = TRUE
)
# Step 1: Fit logistic regression per participant per condition
pse_df <- wtp_rej_longdata %>%
group_by(participant, condition_recode) %>%
do({
mod <- try(glm(socialchoice ~ value_diff, data = ., family = binomial), silent = TRUE)
if (inherits(mod, "try-error")) {
data.frame(pse = NA)
} else {
coefs <- coef(mod)
intercept <- coefs[1]
slope <- coefs[2]
pse <- -intercept / slope
data.frame(pse = pse)
}
}) %>%
ungroup()
# Step 2: Filter out bad PSEs (NA, infinite, or extreme values)
pse_df_clean <- pse_df %>%
filter(!is.na(pse), is.finite(pse), abs(pse) <= 0.05)
# Step 3: Convert condition codes to labels and pivot to wide format
pse_wide <- pse_df_clean %>%
mutate(condition_label = ifelse(condition_recode == -1, "acceptance", "rejection")) %>%
pivot_wider(names_from = condition_label, values_from = pse, names_prefix = "pse_") %>%
mutate(pse_diff = pse_rejection - pse_acceptance)
pse_wide <- pse_wide %>%
filter(!is.na(pse_acceptance), !is.na(pse_rejection))
# Step 4: Compute paired Cohen’s d
cohen_result <- cohen.d(
pse_wide$pse_rejection,
pse_wide$pse_acceptance,
paired = TRUE
)
print(pse_wide)
# This prints the current filtered data
print(pse_wide)
# How many rows?
nrow(pse_wide)
# Structure check
str(pse_wide)
#re-running the per participant model and filtering out outliers
# Step 1: Fit logistic regression per participant per condition
pse_df <- wtp_rej_longdata %>%
group_by(participant, condition_recode) %>%
do({
mod <- try(glm(socialchoice ~ value_diff, data = ., family = binomial), silent = TRUE)
if (inherits(mod, "try-error")) {
data.frame(pse = NA)
} else {
coefs <- coef(mod)
intercept <- coefs[1]
slope <- coefs[2]
pse <- -intercept / slope
data.frame(pse = pse)
}
}) %>%
ungroup()
# Step 2: Filter out bad PSEs (NA, infinite, or extreme values)
pse_df_clean <- pse_df %>%
filter(!is.na(pse), is.finite(pse), abs(pse) <= 0.1)
pse_wide <- pse_wide %>%
filter(!is.na(pse_acceptance), !is.na(pse_rejection))
# Step 3: Convert condition codes to labels and pivot to wide format
# Reformat to wide
pse_wide <- pse_df_clean %>%
mutate(condition_label = ifelse(condition_recode == -1, "acceptance", "rejection")) %>%
pivot_wider(names_from = condition_label, values_from = pse, names_prefix = "pse_") %>%
mutate(pse_diff = pse_rejection - pse_acceptance) %>%
filter(!is.na(pse_acceptance), !is.na(pse_rejection))
# Step 4: Compute paired Cohen’s d
cohen_result <- cohen.d(
pse_wide$pse_rejection,
pse_wide$pse_acceptance,
paired = TRUE
)
# Step 1: Fit logistic regression per participant per condition
pse_df <- wtp_rej_longdata %>%
group_by(participant, condition_recode) %>%
do({
mod <- try(glm(socialchoice ~ value_diff, data = ., family = binomial), silent = TRUE)
if (inherits(mod, "try-error")) {
data.frame(pse = NA)
} else {
coefs <- coef(mod)
intercept <- coefs[1]
slope <- coefs[2]
pse <- -intercept / slope
data.frame(pse = pse)
}
}) %>%
ungroup()
# Step 2: Filter out bad PSEs (NA, infinite, or extreme values)
pse_df_clean <- pse_df %>%
filter(!is.na(pse), is.finite(pse), abs(pse) <= 0.1)
pse_wide <- pse_wide %>%
filter(!is.na(pse_acceptance), !is.na(pse_rejection))
View(pse_wide)
View(pse_df)
source("~/Documents/GitHub/WTP_Rejection_Choice/wtp_rej_regressions.R")
