rej_long <- wtp_rej_longdata %>%
filter(condition_recode == 1) %>%
as.data.frame()  # Ensure it's a data frame if needed
# Subset data where condition_recode == 2
acc_long <- wtp_rej_longdata %>%
filter(condition_recode == -1) %>%
as.data.frame()
View(results)
View(wtp_rej_longdata)
# Function to calculate Standard Deviation safely
safe_sd <- function(x) {
if (length(na.omit(x)) > 1) {
return(sd(x, na.rm = TRUE))
} else {
return(NA)
}
}
# Separate Rejection and Acceptance
rej_long <- wtp_rej_longdata %>% filter(condition_recode == 1)
acc_long <- wtp_rej_longdata %>% filter(condition_recode == -1)
# Compute means for Rejection and Acceptance
mean_data <- wtp_rej_longdata %>%
group_by(condition_recode) %>%
summarise(
mean_spent = mean(social_price, na.rm = TRUE),
.groups = "drop"
)
# Compute SDs
sd_rej <- safe_sd(rej_long$social_price)
sd_acc <- safe_sd(acc_long$social_price)
# Create summary data for first two bars
summary_data <- mean_data %>%
mutate(
sd_spent = c(sd_rej, sd_acc),
condition_recode = factor(condition_recode, levels = c(1, -1), labels = c("Rejection", "Acceptance"))
)
# Create third bar: Value Difference (Social - Non-Social)
value_diff_data <- wtp_rej_longdata %>%
mutate(value_diff = social_price - non_social_price) %>%
summarise(
mean_spent = mean(value_diff, na.rm = TRUE),
sd_spent = safe_sd(value_diff)
) %>%
mutate(condition_recode = "Value Difference")
# Function to calculate Standard Deviation safely
safe_sd <- function(x) {
if (length(na.omit(x)) > 1) {
return(sd(x, na.rm = TRUE))
} else {
return(NA)
}
}
# Separate Rejection and Acceptance
rej_long <- wtp_rej_longdata %>% filter(condition_recode == 1)
acc_long <- wtp_rej_longdata %>% filter(condition_recode == -1)
# Compute means for Rejection and Acceptance
mean_data <- wtp_rej_longdata %>%
group_by(condition_recode) %>%
summarise(
mean_spent = mean(social_price, na.rm = TRUE),
.groups = "drop"
)
# Compute SDs
sd_rej <- safe_sd(rej_long$social_price)
sd_acc <- safe_sd(acc_long$social_price)
# Create summary data for first two bars
summary_data <- mean_data %>%
mutate(
sd_spent = c(sd_rej, sd_acc),
condition_recode = factor(condition_recode, levels = c(1, -1), labels = c("Rejection", "Acceptance"))
)
# Create third bar: Value Difference (Social - Non-Social)
value_diff_data <- wtp_rej_longdata %>%
mutate(value_diff = social_price - nonsocial_price) %>%
summarise(
mean_spent = mean(value_diff, na.rm = TRUE),
sd_spent = safe_sd(value_diff)
) %>%
mutate(condition_recode = "Value Difference")
# Combine all three bars
summary_data_expanded <- bind_rows(summary_data, value_diff_data)
# Make sure ordering is correct for x-axis
summary_data_expanded$condition_recode <- factor(
summary_data_expanded$condition_recode,
levels = c("Rejection", "Acceptance", "Value Difference")
)
# Create the plot
amtspent <- ggplot(summary_data_expanded, aes(x = condition_recode, y = mean_spent, fill = condition_recode)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black", alpha = 0.85) +
geom_errorbar(aes(ymin = mean_spent - sd_spent, ymax = mean_spent + sd_spent),
width = 0.1, position = position_dodge(.9), color = "black", size = 0.8) +
scale_fill_manual(
name = "Condition",
values = c("Rejection" = "#FF6F61", "Acceptance" = "#88CCEE", "Value Difference" = "#CC99FF")
) +
labs(
x = "Condition",
y = "Amount Spent ($)"
) +
theme_minimal() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 26, face = "bold", margin = margin(t = 25)),
axis.title.y = element_text(size = 26, face = "bold", margin = margin(r = 25)),
axis.text.x = element_text(size = 24, face = "bold"),
axis.text.y = element_text(size = 24, face = "bold"),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 22, face = "bold"),
plot.margin = margin(t = 20, r = 20, b = 20, l = 30)
)
# Save plot
ggsave("avgspent_social_plus_valuediff_plot.png", plot = amtspent, width = 10, height = 8, dpi = 300)
# Function to calculate SD safely
safe_sd <- function(x) {
if (length(na.omit(x)) > 1) {
return(sd(x, na.rm = TRUE))
} else {
return(NA)
}
}
# Separate Rejection and Acceptance
rej_long <- wtp_rej_longdata %>% filter(condition_recode == 1)
acc_long <- wtp_rej_longdata %>% filter(condition_recode == -1)
# Means for social price by condition
mean_data <- wtp_rej_longdata %>%
group_by(condition_recode) %>%
summarise(
mean_spent = mean(social_price, na.rm = TRUE),
.groups = "drop"
)
# Standard deviations
sd_rej <- safe_sd(rej_long$social_price)
sd_acc <- safe_sd(acc_long$social_price)
# Format summary data
summary_data <- mean_data %>%
mutate(
sd_spent = c(sd_rej, sd_acc),
condition_recode = factor(condition_recode, levels = c(1, -1), labels = c("Rejection", "Acceptance"))
)
# Calculate range of value differences
value_diff_range <- wtp_rej_longdata %>%
mutate(value_diff = social_price - non_social_price) %>%
summarise(
mean_spent = max(value_diff, na.rm = TRUE) - min(value_diff, na.rm = TRUE),
sd_spent = NA  # No error bar for a range unless you want min/max lines
) %>%
mutate(condition_recode = "Value Difference Range")
# Function to calculate SD safely
safe_sd <- function(x) {
if (length(na.omit(x)) > 1) {
return(sd(x, na.rm = TRUE))
} else {
return(NA)
}
}
# Separate Rejection and Acceptance
rej_long <- wtp_rej_longdata %>% filter(condition_recode == 1)
acc_long <- wtp_rej_longdata %>% filter(condition_recode == -1)
# Means for social price by condition
mean_data <- wtp_rej_longdata %>%
group_by(condition_recode) %>%
summarise(
mean_spent = mean(social_price, na.rm = TRUE),
.groups = "drop"
)
# Standard deviations
sd_rej <- safe_sd(rej_long$social_price)
sd_acc <- safe_sd(acc_long$social_price)
# Format summary data
summary_data <- mean_data %>%
mutate(
sd_spent = c(sd_rej, sd_acc),
condition_recode = factor(condition_recode, levels = c(1, -1), labels = c("Rejection", "Acceptance"))
)
# Calculate range of value differences
value_diff_range <- wtp_rej_longdata %>%
mutate(value_diff = social_price - nonsocial_price) %>%
summarise(
mean_spent = max(value_diff, na.rm = TRUE) - min(value_diff, na.rm = TRUE),
sd_spent = NA  # No error bar for a range unless you want min/max lines
) %>%
mutate(condition_recode = "Value Difference Range")
# Combine all rows
summary_data_expanded <- bind_rows(summary_data, value_diff_range)
# Reorder
summary_data_expanded$condition_recode <- factor(
summary_data_expanded$condition_recode,
levels = c("Rejection", "Acceptance", "Value Difference Range")
)
# Plot
amtspent <- ggplot(summary_data_expanded, aes(x = condition_recode, y = mean_spent, fill = condition_recode)) +
geom_bar(stat = "identity", color = "black", alpha = 0.85) +
geom_errorbar(data = summary_data_expanded %>% filter(!is.na(sd_spent)),
aes(ymin = mean_spent - sd_spent, ymax = mean_spent + sd_spent),
width = 0.1, color = "black", size = 0.8) +
scale_fill_manual(
name = "Condition",
values = c("Rejection" = "#FF6F61", "Acceptance" = "#88CCEE", "Value Difference Range" = "#CC99FF")
) +
labs(
x = "Condition",
y = "Value ($)"
) +
theme_minimal() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 26, face = "bold", margin = margin(t = 25)),
axis.title.y = element_text(size = 26, face = "bold", margin = margin(r = 25)),
axis.text.x = element_text(size = 24, face = "bold"),
axis.text.y = element_text(size = 24, face = "bold"),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 22, face = "bold"),
plot.margin = margin(t = 20, r = 20, b = 20, l = 30)
)
# Save
ggsave("plot_with_value_diff_range_bar.png", plot = amtspent, width = 10, height = 8, dpi = 300)
# Function to calculate SD safely
safe_sd <- function(x) {
if (length(na.omit(x)) > 1) {
return(sd(x, na.rm = TRUE))
} else {
return(NA)
}
}
# Separate Rejection and Acceptance
rej_long <- wtp_rej_longdata %>% filter(condition_recode == 1)
acc_long <- wtp_rej_longdata %>% filter(condition_recode == -1)
# Means for social price by condition
mean_data <- wtp_rej_longdata %>%
group_by(condition_recode) %>%
summarise(
mean_spent = mean(social_price, na.rm = TRUE),
.groups = "drop"
)
# Standard deviations
sd_rej <- safe_sd(rej_long$social_price)
sd_acc <- safe_sd(acc_long$social_price)
# Format summary data
summary_data <- mean_data %>%
mutate(
sd_spent = c(sd_rej, sd_acc),
condition_recode = factor(condition_recode, levels = c(1, -1), labels = c("Rejection", "Acceptance"))
)
# Calculate range: max - min of (social_price - non_social_price)
value_diff_vec <- wtp_rej_longdata %>%
mutate(value_diff = social_price - nonsocial_price) %>%
pull(value_diff)
value_diff_range_bar <- tibble(
mean_spent = max(value_diff_vec, na.rm = TRUE) - min(value_diff_vec, na.rm = TRUE),
sd_spent = NA,
condition_recode = "Value Difference Range"
)
# Combine all three bars
summary_data_expanded <- bind_rows(summary_data, value_diff_range_bar)
# Set factor levels for x-axis order
summary_data_expanded$condition_recode <- factor(
summary_data_expanded$condition_recode,
levels = c("Rejection", "Acceptance", "Value Difference Range")
)
# Plot it
amtspent <- ggplot(summary_data_expanded, aes(x = condition_recode, y = mean_spent, fill = condition_recode)) +
geom_bar(stat = "identity", color = "black", alpha = 0.85) +
geom_errorbar(data = summary_data_expanded %>% filter(!is.na(sd_spent)),
aes(ymin = mean_spent - sd_spent, ymax = mean_spent + sd_spent),
width = 0.1, color = "black", size = 0.8) +
scale_fill_manual(
name = "Condition",
values = c("Rejection" = "#FF6F61", "Acceptance" = "#88CCEE", "Value Difference Range" = "#CC99FF")
) +
labs(
x = "Condition",
y = "Value ($)"
) +
theme_minimal() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 26, face = "bold", margin = margin(t = 25)),
axis.title.y = element_text(size = 26, face = "bold", margin = margin(r = 25)),
axis.text.x = element_text(size = 24, face = "bold"),
axis.text.y = element_text(size = 24, face = "bold"),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 22, face = "bold"),
plot.margin = margin(t = 20, r = 20, b = 20, l = 30)
)
# Save
ggsave("plot_value_diff_range_bar.png", plot = amtspent, width = 10, height = 8, dpi = 300)
# Function to calculate SD safely
safe_sd <- function(x) {
if (length(na.omit(x)) > 1) {
return(sd(x, na.rm = TRUE))
} else {
return(NA)
}
}
# Separate by condition
rej_long <- wtp_rej_longdata %>% filter(condition_recode == 1)
acc_long <- wtp_rej_longdata %>% filter(condition_recode == -1)
# Compute means and SDs
mean_rej <- mean(rej_long$social_price, na.rm = TRUE)
mean_acc <- mean(acc_long$social_price, na.rm = TRUE)
sd_rej <- safe_sd(rej_long$social_price)
sd_acc <- safe_sd(acc_long$social_price)
# Compute value difference (Rejection - Acceptance)
value_diff <- mean_rej - mean_acc
# Assemble summary data
summary_data <- tibble(
condition_recode = c("Rejection", "Acceptance", "Value Difference"),
mean_spent = c(mean_rej, mean_acc, value_diff),
sd_spent = c(sd_rej, sd_acc, NA)  # No SD for difference
)
# Set factor order
summary_data$condition_recode <- factor(
summary_data$condition_recode,
levels = c("Rejection", "Acceptance", "Value Difference")
)
# Plot
amtspent <- ggplot(summary_data, aes(x = condition_recode, y = mean_spent, fill = condition_recode)) +
geom_bar(stat = "identity", color = "black", alpha = 0.85) +
geom_errorbar(data = summary_data %>% filter(!is.na(sd_spent)),
aes(ymin = mean_spent - sd_spent, ymax = mean_spent + sd_spent),
width = 0.1, color = "black", size = 0.8) +
scale_fill_manual(
name = "Condition",
values = c("Rejection" = "#FF6F61", "Acceptance" = "#88CCEE", "Value Difference" = "#CC99FF")
) +
labs(
x = "Condition",
y = "Amount Spent on Social"
) +
theme_minimal() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 26, face = "bold", margin = margin(t = 25)),
axis.title.y = element_text(size = 26, face = "bold", margin = margin(r = 25)),
axis.text.x = element_text(size = 24, face = "bold"),
axis.text.y = element_text(size = 24, face = "bold"),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 22, face = "bold"),
plot.margin = margin(t = 20, r = 20, b = 20, l = 30)
)
# Save
ggsave("plot_with_condition_value_diff_bar.png", plot = amtspent, width = 10, height = 8, dpi = 300)
# Function to calculate Standard Deviation safely
safe_sd <- function(x) {
if (length(na.omit(x)) > 1) {
return(sd(x, na.rm = TRUE))
} else {
return(NA)
}
}
# ✅ Correct Filtering: Rejection = 1, Acceptance = -1
rej_long <- wtp_rej_longdata %>% filter(condition_recode == 1)   # Rejection
acc_long <- wtp_rej_longdata %>% filter(condition_recode == -1)  # Acceptance
# Compute Mean Decision Price for Each Condition
mean_data <- wtp_rej_longdata %>%
group_by(condition_recode) %>%
summarise(
mean_spent = mean(social_decisionprice_mean, na.rm = TRUE),
.groups = "drop"
)
# Compute SD separately for Rejection and Acceptance
sd_rej <- safe_sd(rej_long$social_decisionprice_mean)
sd_acc <- safe_sd(acc_long$social_decisionprice_mean)
# ✅ Debugging: Ensure SDs exist
print(paste("SD for Rejection:", sd_rej))
print(paste("SD for Acceptance:", sd_acc))
# ✅ Assign SD values correctly
summary_data <- mean_data %>%
mutate(
sd_spent = c(sd_rej, sd_acc),  # ✅ Correct order of SD assignment
condition_recode = factor(condition_recode, levels = c(1, -1), labels = c("Rejection", "Acceptance"))  # ✅ Correct ordering
)
# ✅ Debugging: Check if both conditions appear
print(summary_data)
# Plot: Amount Spent on Social by Condition
amtspent <- ggplot(summary_data, aes(x = condition_recode, y = mean_spent, fill = condition_recode)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black", alpha = 0.8) +
geom_errorbar(aes(ymin = mean_spent - sd_spent, ymax = mean_spent + sd_spent),
width = 0.1, position = position_dodge(.9), color = "black", size = 0.8) +
scale_fill_manual(name = "Condition", values = c("Rejection" = "#FF6F61", "Acceptance" = "#88CCEE")) +
labs(
x = "Social Condition",
y = "Amount Spent on Social"
) +
theme_minimal() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 26, face = "bold", margin = margin(t = 25)),
axis.title.y = element_text(size = 26, face = "bold", margin = margin(r = 25)),
axis.text.x = element_text(size = 24, face = "bold"),
axis.text.y = element_text(size = 24, face = "bold"),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 22, face = "bold"),
plot.margin = margin(t = 20, r = 20, b = 20, l = 30)
)
# Save the plot
ggsave("avgspent_social_rejvacc_plot_fixed.png", plot = amtspent, width = 10, height = 8, dpi = 300)
# Function to calculate Standard Error of the Mean (SEM)
safe_se <- function(x) {
if (length(na.omit(x)) > 1) {
return(sd(x, na.rm = TRUE) / sqrt(sum(!is.na(x))))
} else {
return(NA)
}
}
# Compute SEM separately for prop_socialchoice and prop_nonsocialchoice from the rej dataframe
sem_social <- safe_se(rej$prop_socialchoice)
sem_nonsocial <- safe_se(rej$prop_nonsocialchoice)
# Compute Means for Social and Non-Social Choices from the rej dataframe
summary_data <- data.frame(
Choice_Type = c("Social", "Non-Social"),
mean_prop = c(mean(rej$prop_socialchoice, na.rm = TRUE),
mean(rej$prop_nonsocialchoice, na.rm = TRUE)),
sem = c(sem_social, sem_nonsocial)  # Assign calculated SEMs
)
# Print summary data to verify SEM values
print(summary_data)
# 👇 Add this to set correct order: Social on the left, Non-Social on the right
summary_data$Choice_Type <- factor(summary_data$Choice_Type, levels = c("Social", "Non-Social"))
# Create the Bar Plot with Correct SEM-based Error Bars
propsoc_choicetype <- ggplot(summary_data, aes(x = Choice_Type, y = mean_prop, fill = Choice_Type)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black", alpha = 0.9) +  # Bars with outline
geom_errorbar(aes(ymin = mean_prop - sem, ymax = mean_prop + sem),
width = 0.1, position = position_dodge(.9), color = "black", size = 0.8) +  # Corrected SEM error bars
scale_fill_manual(name = "Choice Type", values = c("Social" = "#FF6F61", "Non-Social" = "#88CCEE")) +  # Custom colors
labs(
x = "Choice Type",
y = "Proportion of Choices",
title = ""
) +
theme_minimal() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 26, face = "bold", margin = margin(t = 25)),
axis.title.y = element_text(size = 26, face = "bold", margin = margin(r = 25)),
axis.text.x = element_text(size = 24, face = "bold"),
axis.text.y = element_text(size = 24, face = "bold"),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 22, face = "bold"),
plot.margin = margin(t = 20, r = 20, b = 20, l = 30)
)
# Save the plot
ggsave("social_vs_nonsocial_choices_fixed.png", plot = propsoc_choicetype, width = 10, height = 8, dpi = 300)
#hierarchical logistic regression for PSE with interaction of condition
PSE <- glmer(socialchoice ~ value_diff * condition_recode + (1 + value_diff | participant),
data = wtp_rej_longdata, family = binomial)
summary(PSE)
# Assign the coefficients
b0 <- 0.32937
b1 <- -69.19869
b2 <- -0.02595
b3 <- -1.61406
# Compute condition-specific PSEs
pse_accept <- - (b0 - b2) / (b1 - b3)
pse_reject <- - (b0 + b2) / (b1 + b3)
# Print them
pse_accept
pse_reject
#plot PSE
value_diff_seq <- seq(-0.05, 0.05, length.out = 100)
# Coefficients from your model
b0 <- 0.32937
b1 <- -69.19869
b2 <- -0.02595
b3 <- -1.61406
# Build dataframe
pred_data <- expand.grid(
value_diff = value_diff_seq,
condition_recode = c(-1, 1)  # -1 = Acceptance, 1 = Rejection
)
# Calculate linear predictor manually
pred_data <- pred_data %>%
mutate(
condition_label = ifelse(condition_recode == -1, "Acceptance", "Rejection"),
linear_predictor = b0 + b1 * value_diff + b2 * condition_recode + b3 * value_diff * condition_recode,
predicted_prob = 1 / (1 + exp(-linear_predictor))  # logistic function
)
PSE_plot <- (
ggplot(pred_data, aes(x = value_diff, y = predicted_prob, color = condition_label)) +
geom_line(size = 1.2) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray40") +
geom_point(data = data.frame(
value_diff = c(pse_accept, pse_reject),
predicted_prob = 0.5,
condition_label = c("Acceptance", "Rejection")
), aes(x = value_diff, y = predicted_prob, color = condition_label),
size = 3, shape = 21, fill = "white") +
scale_color_manual(
values = c("Acceptance" = "#88CCEE",
"Rejection" = "#FF6F61")
) +
labs(
title = "",
x = "Value Difference",
y = "Probability of Social Choice",
color = "Condition"
) +
theme_classic(base_size = 14) +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 26, face = "bold", margin = margin(t = 25)),
axis.title.y = element_text(size = 26, face = "bold", margin = margin(r = 25)),
axis.text.x = element_text(size = 24,face = "bold"),
axis.text.y = element_text(size = 24,face = "bold"),
legend.title = element_text(size = 24,face = "bold"),
legend.text = element_text(size = 22,face = "bold"),
axis.ticks.length = unit(6, "pt")  # Default is around 5–6 pt, go smaller if you want
)
)
# Save the plot
#ggsave("PSE_plot.png", PSE_plot, width = 6, height = 4, dpi = 300)
ggsave("PSE_plot_fixed.png", plot = PSE_plot, width = 10, height = 8, dpi = 300)
