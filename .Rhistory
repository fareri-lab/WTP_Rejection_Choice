color = "Condition",
fill = "Condition"
) +
theme_minimal(base_size = 14) +
theme(panel.background = element_blank(),
panel.grid = element_blank(),
axis.line = element_line(color = "black"),
legend.position = "right",
text = element_text(size = 14))
#Logit regression: trial by trial (mixed effects models) Social_choice ~ condition_recode * decision_price
wtp_rej_longdata$decision_price_z <- scale(wtp_rej_longdata$decision_price)
decisionprice_condition_onchoice1 <- lmer(socialchoice ~  decision_price_z * condition_recode + (1 | participant), data = wtp_rej_longdata)
summary(decisionprice_condition_onchoice1)
plot_model(decisionprice_condition_onchoice1, type='int')
# Generate predicted probabilities across values of decision_price_z
preds <- ggpredict(decisionprice_condition_onchoice1, terms = c("decision_price_z", "condition_recode"))
# View structure
head(preds)
# Custom plot using ggplot2
ggplot(preds, aes(x = x, y = predicted, color = group)) +
geom_line(size = 1.2) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high, fill = group), alpha = 0.2, color = NA) +
labs(
title = "Predicted Probability of Social Choice by Price and Condition",
x = "Decision Price (z)",
y = "Pred Probability of Social Choice",
color = "Condition",
fill = "Condition"
) +
theme_minimal(base_size = 14) +
theme(panel.background = element_blank(),
panel.grid = element_blank(),
axis.line = element_line(color = "black"),
legend.position = "right",
text = element_text(size = 14))
# Rename condition levels for legend
preds$group <- factor(preds$group,
levels = c("rejected", "accepted"),  # original levels in data
labels = c("Rejection", "Acceptance"))  # labels for plot
# Plot
ggplot(preds, aes(x = x, y = predicted, color = group, fill = group)) +
geom_line(size = 1.5) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, color = NA) +
scale_color_manual(name = "Condition", values = c("Rejection" = "#FF6F61", "Acceptance" = "#88CCEE")) +
scale_fill_manual(name = "Condition", values = c("Rejection" = "#FF6F61", "Acceptance" = "#88CCEE")) +
labs(
x = "Standardized Decision Price (z)",
y = "Predicted Probability of Choosing Social"
) +
theme_minimal() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 26, face = "bold", margin = margin(t = 25)),
axis.title.y = element_text(size = 26, face = "bold", margin = margin(r = 25)),
axis.text.x = element_text(size = 24, face = "bold"),
axis.text.y = element_text(size = 24, face = "bold"),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 22, face = "bold"),
plot.margin = margin(t = 20, r = 20, b = 20, l = 30)
)
# Custom plot using ggplot2
ggplot(preds, aes(x = x, y = predicted, color = group)) +
geom_line(size = 1.2) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high, fill = group), alpha = 0.2, color = NA) +
labs(
title = "Predicted Probability of Social Choice by Price and Condition",
x = "Decision Price (z)",
y = "Pred Probability of Social Choice",
color = "Condition",
fill = "Condition"
) +
theme_minimal(base_size = 14) +
theme(panel.background = element_blank(),
panel.grid = element_blank(),
axis.line = element_line(color = "black"),
legend.position = "right",
text = element_text(size = 14))
# Generate predicted probabilities across values of decision_price_z
preds <- ggpredict(decisionprice_condition_onchoice1, terms = c("decision_price_z", "condition_recode"))
# View structure
head(preds)
# Custom plot using ggplot2
ggplot(preds, aes(x = x, y = predicted, color = group)) +
geom_line(size = 1.2) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high, fill = group), alpha = 0.2, color = NA) +
labs(
title = "Predicted Probability of Social Choice by Price and Condition",
x = "Standardized Decision Price (z)",
y = "Predicted Probability of Choosing Option",
color = "Condition",
fill = "Condition"
) +
theme_minimal(base_size = 14) +
theme(panel.background = element_blank(),
panel.grid = element_blank(),
axis.line = element_line(color = "black"),
legend.position = "right",
text = element_text(size = 14))
# Fix legend labels using dplyr::recode
preds <- preds %>%
mutate(group = recode(group,
"rejected" = "Rejection",
"accepted" = "Acceptance"))
# Custom plot using ggplot2
ggplot(preds, aes(x = x, y = predicted, color = group)) +
geom_line(size = 1.2) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high, fill = group), alpha = 0.2, color = NA) +
labs(
title = "Predicted Probability of Social Choice by Price and Condition",
x = "Standardized Decision Price (z)",
y = "Predicted Probability of Choosing Option",
color = "Condition",
fill = "Condition"
) +
theme_minimal(base_size = 14) +
theme(panel.background = element_blank(),
panel.grid = element_blank(),
axis.line = element_line(color = "black"),
legend.position = "right",
text = element_text(size = 14))
# Check actual group labels
unique(preds$group)
ggplot(preds, aes(x = x, y = predicted, color = group, fill = group)) +
geom_line(size = 1.5) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, color = NA) +
scale_color_manual(
name = "Condition",
values = c("-1" = "#88CCEE", "1" = "#FF6F61"),
labels = c("-1" = "Acceptance", "1" = "Rejection")
) +
scale_fill_manual(
name = "Condition",
values = c("-1" = "#88CCEE", "1" = "#FF6F61"),
labels = c("-1" = "Acceptance", "1" = "Rejection")
) +
labs(
x = "Standardized Decision Price (z)",
y = "Predicted Probability of Choosing Social"
) +
theme_minimal() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 26, face = "bold", margin = margin(t = 25)),
axis.title.y = element_text(size = 26, face = "bold", margin = margin(r = 25)),
axis.text.x = element_text(size = 24, face = "bold"),
axis.text.y = element_text(size = 24, face = "bold"),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 22, face = "bold"),
plot.margin = margin(t = 20, r = 20, b = 20, l = 30)
)
plot_model(decisionprice_condition_onchoice1, type='int')
# Generate predicted probabilities across values of decision_price_z
preds <- ggpredict(decisionprice_condition_onchoice1, terms = c("decision_price_z", "condition_recode"))
# View structure
head(preds)
ggsave("linearmixedeffects.png", plot = PSE_plot, width = 10, height = 8, dpi = 300)
linearmixedeffects <- ggplot(preds, aes(x = x, y = predicted, color = group, fill = group)) +
geom_line(size = 1.5) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, color = NA) +
scale_color_manual(
name = "Condition",
values = c("-1" = "#88CCEE", "1" = "#FF6F61"),
labels = c("-1" = "Acceptance", "1" = "Rejection")
) +
scale_fill_manual(
name = "Condition",
values = c("-1" = "#88CCEE", "1" = "#FF6F61"),
labels = c("-1" = "Acceptance", "1" = "Rejection")
) +
labs(
x = "Standardized Decision Price (z)",
y = "Predicted Probability of Choosing Social"
) +
theme_minimal() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 26, face = "bold", margin = margin(t = 25)),
axis.title.y = element_text(size = 26, face = "bold", margin = margin(r = 25)),
axis.text.x = element_text(size = 24, face = "bold"),
axis.text.y = element_text(size = 24, face = "bold"),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 22, face = "bold"),
plot.margin = margin(t = 20, r = 20, b = 20, l = 30)
)
ggsave("linearmixedeffects.png", plot = linearmixedeffects, width = 10, height = 8, dpi = 300)
#Logit regression: trial by trial (mixed effects models) Social_choice ~ condition_recode * decision_price
wtp_rej_longdata$decision_price_z <- scale(wtp_rej_longdata$decision_price)
decisionprice_condition_onchoice1 <- lmer(socialchoice ~  decision_price_z * condition_recode + (1 | participant), data = wtp_rej_longdata)
summary(decisionprice_condition_onchoice1)
plot_model(decisionprice_condition_onchoice1, type='int')
# Generate predicted probabilities across values of decision_price_z
preds <- ggpredict(decisionprice_condition_onchoice1, terms = c("decision_price_z", "condition_recode"))
# View structure
head(preds)
linearmixedeffects <- ggplot(preds, aes(x = x, y = predicted, color = group, fill = group)) +
geom_line(size = 1.5) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, color = NA) +
scale_color_manual(
name = "Condition",
values = c("-1" = "#88CCEE", "1" = "#FF6F61"),
labels = c("-1" = "Acceptance", "1" = "Rejection")
) +
scale_fill_manual(
name = "Condition",
values = c("-1" = "#88CCEE", "1" = "#FF6F61"),
labels = c("-1" = "Acceptance", "1" = "Rejection")
) +
labs(
x = "Decision Price (z)",
y = "Predicted Probability of Choosing Social"
) +
theme_minimal() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 26, face = "bold", margin = margin(t = 25)),
axis.title.y = element_text(size = 26, face = "bold", margin = margin(r = 25)),
axis.text.x = element_text(size = 24, face = "bold"),
axis.text.y = element_text(size = 24, face = "bold"),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 22, face = "bold"),
plot.margin = margin(t = 20, r = 20, b = 20, l = 30)
)
# Save the plot
ggsave("linearmixedeffects.png", plot = linearmixedeffects, width = 10, height = 8, dpi = 300)
# Generate predicted probabilities across values of decision_price_z
preds <- ggpredict(decisionprice_condition_onchoice1, terms = c("decision_price_z", "condition_recode"))
# View structure
head(preds)
linearmixedeffects <- ggplot(preds, aes(x = x, y = predicted, color = group, fill = group)) +
geom_line(size = 1.5) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, color = NA) +
scale_color_manual(
name = "Condition",
values = c("-1" = "#88CCEE", "1" = "#FF6F61"),
labels = c("-1" = "Acceptance", "1" = "Rejection")
) +
scale_fill_manual(
name = "Condition",
values = c("-1" = "#88CCEE", "1" = "#FF6F61"),
labels = c("-1" = "Acceptance", "1" = "Rejection")
) +
labs(
x = "Decision Price (z)",
y = "Predicted Probability of Choosing Social"
) +
theme_minimal() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 26, face = "bold", margin = margin(t = 25)),
axis.title.y = element_text(size = 26, face = "bold", margin = margin(r = 25)),
axis.text.x = element_text(size = 24, face = "bold"),
axis.text.y = element_text(size = 24, face = "bold"),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 22, face = "bold"),
plot.margin = margin(t = 20, r = 20, b = 20, l = 30)
)
# Save the plot
ggsave("linearmixedeffects.png", plot = linearmixedeffects, width = 10, height = 8, dpi = 300)
#Logit regression: trial by trial (mixed effects models) Social_choice ~ condition_recode * decision_price
wtp_rej_longdata$decision_price_z <- scale(wtp_rej_longdata$decision_price)
decisionprice_condition_onchoice1 <- lmer(socialchoice ~  decision_price_z * condition_recode + (1 | participant), data = wtp_rej_longdata)
summary(decisionprice_condition_onchoice1)
# Generate predicted probabilities across values of decision_price_z
preds <- ggpredict(decisionprice_condition_onchoice1, terms = c("decision_price_z", "condition_recode"))
# View structure
head(preds)
linearmixedeffects <- ggplot(preds, aes(x = x, y = predicted, color = group, fill = group)) +
geom_line(size = 1.5) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, color = NA) +
scale_color_manual(
name = "Condition",
values = c("-1" = "#88CCEE", "1" = "#FF6F61"),
labels = c("-1" = "Acceptance", "1" = "Rejection")
) +
scale_fill_manual(
name = "Condition",
values = c("-1" = "#88CCEE", "1" = "#FF6F61"),
labels = c("-1" = "Acceptance", "1" = "Rejection")
) +
labs(
x = "Decision Price (z)",
y = "Predicted Probability of Choosing Social"
) +
theme_minimal() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 26, face = "bold", margin = margin(t = 25)),
axis.title.y = element_text(size = 26, face = "bold", margin = margin(r = 25)),
axis.text.x = element_text(size = 24, face = "bold"),
axis.text.y = element_text(size = 24, face = "bold"),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 22, face = "bold"),
plot.margin = margin(t = 20, r = 20, b = 20, l = 30)
)
# Save the plot
ggsave("linearmixedeffects.png", plot = linearmixedeffects, width = 10, height = 8, dpi = 300)
decisionprice_condition_onchoice1 <- lmer(socialchoice ~  decision_price_z * condition_recode + (1 | participant), data = wtp_rej_longdata)
summary(decisionprice_condition_onchoice1)
# Generate predicted probabilities across values of decision_price_z
preds <- ggpredict(decisionprice_condition_onchoice1, terms = c("decision_price_z", "condition_recode"))
# View structure
head(preds)
linearmixedeffects <- ggplot(preds, aes(x = x, y = predicted, color = group, fill = group)) +
geom_line(size = 1.5) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, color = NA) +
scale_color_manual(
name = "Condition",
values = c("-1" = "#88CCEE", "1" = "#FF6F61"),
labels = c("-1" = "Acceptance", "1" = "Rejection")
) +
scale_fill_manual(
name = "Condition",
values = c("-1" = "#88CCEE", "1" = "#FF6F61"),
labels = c("-1" = "Acceptance", "1" = "Rejection")
) +
labs(
x = "Decision Price (z)",
y = "Predicted Probability of Choosing Social"
) +
theme_minimal() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 26, face = "bold", margin = margin(t = 25)),
axis.title.y = element_text(size = 26, face = "bold", margin = margin(r = 25)),
axis.text.x = element_text(size = 24, face = "bold"),
axis.text.y = element_text(size = 24, face = "bold"),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 22, face = "bold"),
plot.margin = margin(t = 20, r = 20, b = 20, l = 30)
)
# Save the plot
ggsave("linearmixedeffects.png", plot = linearmixedeffects, width = 10, height = 8, dpi = 300)
linearmixedeffects <- ggplot(preds, aes(x = x, y = predicted, color = group, fill = group)) +
geom_line(size = 1.5) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, color = NA) +
scale_color_manual(
name = "Condition",
values = c("-1" = "#88CCEE", "1" = "#FF6F61"),
labels = c("-1" = "Acceptance", "1" = "Rejection")
) +
scale_fill_manual(
name = "Condition",
values = c("-1" = "#88CCEE", "1" = "#FF6F61"),
labels = c("-1" = "Acceptance", "1" = "Rejection")
) +
labs(
x = "Decision Price (z)",
y = "Pred Probability of Choosing Social"
) +
theme_minimal() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 26, face = "bold", margin = margin(t = 25)),
axis.title.y = element_text(size = 26, face = "bold", margin = margin(r = 25)),
axis.text.x = element_text(size = 24, face = "bold"),
axis.text.y = element_text(size = 24, face = "bold"),
legend.title = element_text(size = 24, face = "bold"),
legend.text = element_text(size = 22, face = "bold"),
plot.margin = margin(t = 20, r = 20, b = 20, l = 30)
)
# Save the plot
ggsave("linearmixedeffects.png", plot = linearmixedeffects, width = 10, height = 8, dpi = 300)
pca_complex <-lmer(socialchoice ~ PC1 * condition_recode + value_diff * PC1 + PC2 + salience_mean * PC1 + (1 | participant), data = merged_data)
summary(pca_complex)
View(plot_data)
# Generate predictions for the interaction PC1 * value_diff
preds_interaction <- ggpredict(
pca_complex,
terms = c("PC1 [all]", "value_diff [all]")
)
# Check structure
head(preds_interaction)
View(merged_data)
# Generate predictions for the interaction PC1 * value_diff
preds <- ggpredict(pca_complex, terms = c("PC1 [-2:2 by=0.1]", "value_diff [all]"))
head(preds)
pca_complex <-lmer(socialchoice ~ PC1 * condition_recode + value_diff * PC1 + PC2 + salience_mean * PC1 + (1 | participant), data = merged_data)
summary(pca_complex)
# Use a smooth range for PC1 and discrete for value_diff
# (e.g., 3 representative values of value_diff: -1, 0, 1)
preds <- ggpredict(pca_complex, terms = c("PC1 [-2:2 by=0.1]", "value_diff [-1, 0, 1]"))
# Plot
pcmixedeffects<- ggplot(preds, aes(x = x, y = predicted, color = as.factor(group), fill = as.factor(group))) +
geom_line(size = 1.5) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, color = NA) +
scale_color_brewer(palette = "Dark2", name = "Value Diff") +
scale_fill_brewer(palette = "Dark2", name = "Value Diff") +
labs(
x = "PC1 (Social-Reward Sensitivity)",
y = "Predicted Probability of Choosing Social",
title = "Interaction of PC1 and Value Diff on Social Choice"
) +
theme_minimal() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 24, face = "bold", margin = margin(t = 20)),
axis.title.y = element_text(size = 24, face = "bold", margin = margin(r = 20)),
axis.text = element_text(size = 20),
legend.title = element_text(size = 20, face = "bold"),
legend.text = element_text(size = 18),
plot.title = element_text(size = 22, face = "bold", hjust = 0.5),
plot.margin = margin(20, 20, 20, 20)
)
ggsave("pcmixedeffects", plot = pcmixedeffects, width = 10, height = 8, dpi = 300)
ggsave("pcmixedeffects.png", plot = pcmixedeffects, width = 10, height = 8, dpi = 300)
# Define meaningful values for value_diff, e.g., -1 SD, mean, +1 SD
valdiff_qs <- quantile(merged_data$value_diff, probs = c(0.1, 0.5, 0.9), na.rm = TRUE)
preds <- ggpredict(pca_complex, terms = c(
paste0("PC1 [", round(min(merged_data$PC1),2), ":", round(max(merged_data$PC1),2), " by=0.1]"),
paste0("value_diff [", paste(round(valdiff_qs,2), collapse = ","), "]")
))
pcmixedeffects<- ggplot(preds, aes(x = x, y = predicted, color = group, fill = group)) +
geom_line(size = 1.5) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, color = NA) +
scale_color_manual(
values = c("#1b9e77", "#d95f02", "#7570b3"),
name = "Value Diff",
labels = paste("Value Diff =", round(valdiff_qs, 2))
) +
scale_fill_manual(
values = c("#1b9e77", "#d95f02", "#7570b3"),
name = "Value Diff",
labels = paste("Value Diff =", round(valdiff_qs, 2))
) +
labs(
x = "PC1",
y = "Predicted Probability of Choosing Social",
title = "Interaction of PC1 and Value Diff"
) +
theme_minimal() +
theme(
axis.title = element_text(size = 24, face = "bold"),
axis.text = element_text(size = 20),
legend.title = element_text(size = 20, face = "bold"),
legend.text = element_text(size = 18),
plot.title = element_text(size = 22, face = "bold", hjust = 0.5)
)
ggsave("pcmixedeffects.png", plot = pcmixedeffects, width = 10, height = 8, dpi = 300)
pcmixedeffects<- ggplot(preds, aes(x = x, y = predicted, color = group, fill = group)) +
geom_line(size = 1.5) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, color = NA) +
scale_color_manual(
values = c("#E2B007", "#007C91", "#5B3A70"),
name = "Value Diff",
labels = labels = c("Nonsoc > Soc", "Equal", "Soc > Nonsoc"))
pcmixedeffects<- ggplot(preds, aes(x = x, y = predicted, color = group, fill = group)) +
geom_line(size = 1.5) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, color = NA) +
scale_color_manual(
values = c("#E2B007", "#007C91", "#5B3A70"),
name = "Value Diff",
labels = c("Nonsoc > Soc", "Equal", "Soc > Nonsoc"))
+
scale_fill_manual(
values = c("#e2b007", "#007c91", "#5B3A70"),
name = "Value Diff",
labels = c("Nonsoc > Soc", "Equal", "Soc > Nonsoc"))
pcmixedeffects <- ggplot(preds, aes(x = x, y = predicted, color = group, fill = group)) +
geom_line(size = 1.5) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, color = NA) +
scale_color_manual(
values = c("#E2B007", "#007C91", "#5B3A70"),
name = "Value Diff",
labels = c("Nonsoc > Soc", "Equal", "Soc > Nonsoc")
) +
scale_fill_manual(
values = c("#E2B007", "#007C91", "#5B3A70"),
name = "Value Diff",
labels = c("Nonsoc > Soc", "Equal", "Soc > Nonsoc")
) +
labs(
x = "PC1",
y = "Pred Probability of Choosing Social",
title = ""
) +
theme_minimal() +
theme(
axis.title = element_text(size = 24, face = "bold"),
axis.text = element_text(size = 20),
legend.title = element_text(size = 20, face = "bold"),
legend.text = element_text(size = 18),
plot.title = element_text(size = 22, face = "bold", hjust = 0.5)
)
ggsave("pcmixedeffects.png", plot = pcmixedeffects, width = 10, height = 8, dpi = 300)
pcmixedeffects <- ggplot(preds, aes(x = x, y = predicted, color = group, fill = group)) +
geom_line(size = 1.5) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, color = NA) +
scale_color_manual(
values = c("#E2B007", "#007C91", "#5B3A70"),
name = "Value Diff",
labels = c("Nonsoc > Soc", "Equal", "Soc > Nonsoc")
) +
scale_fill_manual(
values = c("#E2B007", "#007C91", "#5B3A70"),
name = "Value Diff",
labels = c("Nonsoc > Soc", "Equal", "Soc > Nonsoc")
) +
labs(
x = "PC1",
y = "Pred Probability of Choosing Social",
title = ""
) +
theme_minimal() +
theme(
panel.grid = element_blank(),
axis.title = element_text(size = 24, face = "bold"),
axis.text = element_text(size = 20),
legend.title = element_text(size = 20, face = "bold"),
legend.text = element_text(size = 18),
plot.title = element_text(size = 22, face = "bold", hjust = 0.5)
)
ggsave("pcmixedeffects.png", plot = pcmixedeffects, width = 10, height = 8, dpi = 300)
